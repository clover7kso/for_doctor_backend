generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  avatar         String?
  password       String
  userName       String     @unique
  email          String     @unique
  medical_id     String
  medical_cate   String
  medical_certi  certiImage
  permit         Boolean    @default(false)
  registerSecret String     @default("")
  likes          Like[]

  alertbox PostAlert[]
  Post     Post[]      @relation("PostAuthor")
  inbox    Message[]   @relation("MessageReceiver")
  outbox   Message[]   @relation("MessageSender")

  @@unique([medical_id, medical_cate])
}

model certiImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  url     String
  emailId String
  user    User   @relation(fields: [emailId], references: [email])
}

model Post {
  id        String   @id @default(cuid())
  user      User     @relation(name: "PostAuthor", fields: [userName], references: [userName])
  userName  String   @default("익명")
  updatedAt DateTime @updatedAt @default(now())
  createdAt DateTime @default(now())

  category  String
  title     String
  content   String
  views     Int
  comments  Comment[]
  PostAlert PostAlert[]
}

model PostAlert {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(name: "PostAuthor", fields: [userName], references: [userName])
  userName  String   @default("익명")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  text   String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model Product {
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt @default(now())
  createdAt DateTime  @default(now())
  expireAt  DateTime?

  productImage productImage
  detailImages detailImage[]
  title        String
  content      String        @default("")
  views        Int
  tag          String
  Like         Like[]
}

model productImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  url       String
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}

model detailImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text         String
  fromUserName String
  toUserName   String
  from         User   @relation("MessageSender", fields: [fromUserName], references: [userName])
  to           User   @relation("MessageReceiver", fields: [toUserName], references: [userName])
}
