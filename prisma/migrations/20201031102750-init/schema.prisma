generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = "***"
}

model HomeAD {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  expireAt  DateTime?

  imageUrl String
  url      String
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  avatar         String?
  password       String
  name           String
  phone          String  @unique
  permit         Boolean @default(false)
  email_check    Boolean @default(false)
  registerSecret String  @default("")
  role           Int

  inbox  Message[] @relation("MessageReceiver")
  outbox Message[] @relation("MessageSender")
  rooms  Room[]    @relation(name: "RoomParticipants")

  UserDoctor   UserDoctor[]   @relation("userDoctorId")
  UserMarketer UserMarketer[] @relation("userMarketId")
  likeProduct  likeProduct[]
}

model UserDoctor {
  id     String @id @default(cuid())
  user   User   @relation(name: "userDoctorId", fields: [userId], references: [id])
  userId String

  medical_cate  String
  medical_id    String
  medical_certi String

  likeProducts likeProduct[]
  Post         Post[]        @relation("PostAuthor")
  Comment      Comment[]     @relation("CommentAuthor")

  @@unique([medical_id, medical_cate])
}

model UserMarketer {
  id     String @id @default(cuid())
  user   User   @relation(name: "userMarketId", fields: [userId], references: [id])
  userId String

  company_cate  String
  company_name  String
  company_id    String
  company_certi String

  product Product[]
}

model Post {
  id        String     @id @default(cuid())
  user      UserDoctor @relation(name: "PostAuthor", fields: [userId], references: [userId])
  userId    String
  updatedAt DateTime   @default(now()) @updatedAt
  createdAt DateTime   @default(now())

  category   String
  title      String
  content    String
  views      Int       @default(0)
  todayViews Int       @default(0)
  comments   Comment[]
}

model Comment {
  id        String     @id @default(cuid())
  user      UserDoctor @relation(name: "CommentAuthor", fields: [userId], references: [userId])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  text   String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Product {
  id        String    @id @default(cuid())
  updatedAt DateTime  @default(now()) @updatedAt
  createdAt DateTime  @default(now())
  expireAt  DateTime?

  Marketer   UserMarketer? @relation(fields: [marketerId], references: [userId])
  marketerId String?

  mainCategory String
  subCategory  String?
  sampleImages sampleImage[]
  detailImages detailImage[]
  title        String
  content      String        @default("")
  views        Int
  calls        Int
  aboveAD      Boolean       @default(false)
  likeProduct  likeProduct[]
}

model sampleImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  imgOrder  Int
  @@unique([productId, imgOrder])
}

model detailImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  imgOrder  Int
  @@unique([productId, imgOrder])
}

model likeProduct {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId       String
  user         User        @relation(fields: [userId], references: [id])
  productId    String
  product      Product     @relation(fields: [productId], references: [id])
  UserDoctor   UserDoctor? @relation(fields: [userDoctorId], references: [id])
  userDoctorId String?
}

model Room {
  createdAt    DateTime  @default(now())
  id           String    @id @default(cuid())
  updatedAt    DateTime  @default(now()) @updatedAt
  messages     Message[]
  participants User[]    @relation(name: "RoomParticipants", references: [id])
}

model Message {
  createdAt  DateTime @default(now())
  fromUserId String
  id         String   @id @default(cuid())
  roomId     String
  text       String
  toUserId   String
  updatedAt  DateTime @updatedAt
  from       User     @relation("MessageSender", fields: [fromUserId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])
  to         User     @relation("MessageReceiver", fields: [toUserId], references: [id])
}
